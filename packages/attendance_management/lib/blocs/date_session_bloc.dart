import 'package:attendance_management/attendance_management.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

// Part of the code generated by Freezed for immutable classes
part 'date_session_bloc.freezed.dart';

// Type definition for emitter used in the DateSessionBloc
typedef DateSessionEmitter = Emitter<DateSessionStates>;

/*
  @author  Ramkrishna-egov
  */
// DateSessionBloc responsible for managing date session-related state
class DateSessionBloc extends Bloc<DateSessionEvents, DateSessionStates> {
  DateSessionBloc(super.initialState) {
    on(_onInitial);
    on(_onLoadSelectedRegisterData);
  }
  // Event handler for InitialDateSession event
  void _onInitial(
    InitialDateSession event,
    Emitter<DateSessionStates> emit,
  ) async {
    // Emitting DateSessionLoading state to indicate loading
    emit(const DateSessionLoading());
  }

  // Event handler for LoadSelectedRegisterData event
  void _onLoadSelectedRegisterData(
    LoadSelectedRegisterData event,
    Emitter<DateSessionStates> emit,
  ) async {
    // Finding and emitting the selected register based on ID
    final selectedRegister =
        event.registers.where((e) => e.id == event.registerID).first;
    emit(DateSessionLoaded(
      selectedRegister: selectedRegister,
    ));
  }
}

// Freezed class for defining date session-related events
@freezed
class DateSessionEvents with _$DateSessionEvents {
  // Event for loading localization data
  const factory DateSessionEvents.loadLocalization(List codes) =
      LoadLocalization;
  // Event for initializing date session
  const factory DateSessionEvents.initial() = InitialDateSession;
  // Event for loading selected register
  const factory DateSessionEvents.loadSelectedRegister(
      {required final List<AttendanceRegisterModel> registers,
      required final String registerID}) = LoadSelectedRegisterData;
}

// Freezed class for defining date session-related states
@freezed
class DateSessionStates with _$DateSessionStates {
  // Loading state
  const factory DateSessionStates.dateSessionLoading() = DateSessionLoading;
  // Loaded state with selected register
  const factory DateSessionStates.dateSessionLoaded({
    required final AttendanceRegisterModel selectedRegister,
  }) = DateSessionLoaded;
}
