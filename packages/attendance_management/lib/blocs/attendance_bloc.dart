import 'package:attendance_management/attendance_management.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

// Part of the code generated by Freezed for immutable classes
part 'attendance_bloc.freezed.dart';

// Type definition for emitter used in the AttendanceBloc
typedef AttendanceSearchEmitter = Emitter<AttendanceStates>;

/*
  @author  Ramkrishna-egov
  */
// AttendanceBloc responsible for managing attendance-related state
class AttendanceBloc extends Bloc<AttendanceEvents, AttendanceStates> {
  // Constructor initializing the initial state and setting up event handlers
  AttendanceBloc(super.initialState) {
    on(_onInitial);
    on(_onLoadAttendanceRegisterData);
    on(_onLoadSelectedRegisterData);
  }

  // Event handler for InitialAttendance event
  void _onInitial(
    InitialAttendance event,
    Emitter<AttendanceStates> emit,
  ) async {
    emit(const RegisterLoading());
    // Getting attendance registers using a singleton instance
    AttendanceSingleton().getAttendanceRegisters(
        (attendanceRegisterModel) =>
            add(LoadAttendanceRegisterData(attendanceRegisterModel)));
  }

  // Event handler for LoadAttendanceRegisterData event
  void _onLoadAttendanceRegisterData(
    LoadAttendanceRegisterData event,
    Emitter<AttendanceStates> emit,
  ) async {
    emit(RegisterLoaded(
      registers: event.registers,
    ));
  }

  // Event handler for LoadSelectedAttendanceRegisterData event
  void _onLoadSelectedRegisterData(
    LoadSelectedAttendanceRegisterData event,
    Emitter<AttendanceStates> emit,
  ) async {
    emit(const RegisterLoading());
    // Finding and emitting the selected register based on ID
    final selectedRegister =
        await event.registers.where((e) => e.id == event.registerID).first;
    emit(SelectedRegisterLoaded(
      selectedRegister: selectedRegister,
    ));
  }
}

// Freezed class for defining attendance-related events
@freezed
class AttendanceEvents with _$AttendanceEvents {
  const factory AttendanceEvents.initial() = InitialAttendance;
  const factory AttendanceEvents.loadAttendanceRegisters(
      List<AttendanceRegisterModel> registers) = LoadAttendanceRegisterData;
  const factory AttendanceEvents.loadSelectedRegister(
      {required final List<AttendanceRegisterModel> registers,
      required final String registerID}) = LoadSelectedAttendanceRegisterData;
}

// Freezed class for defining attendance-related states
@freezed
class AttendanceStates with _$AttendanceStates {
  const factory AttendanceStates.registerLoading() = RegisterLoading;
  const factory AttendanceStates.registerLoaded({
    required final List<AttendanceRegisterModel> registers,
  }) = RegisterLoaded;
  const factory AttendanceStates.selectedRegisterLoaded({
    final AttendanceRegisterModel? selectedRegister,
  }) = SelectedRegisterLoaded;

  const factory AttendanceStates.registerError(String message) = RegisterError;
}
